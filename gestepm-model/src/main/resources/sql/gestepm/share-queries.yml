sql:

  qry-list-of-s: |

    SELECT *
    FROM (
      SELECT
        cs.construction_share_id AS share_id,
        cs.user_id,
        CONCAT(us.name, us.surnames) AS username,
        cs.project_id,
        pr.name AS project_name,
        cs.start_date,
        cs.end_date,
        CONCAT('/shares/construction/', cs.construction_share_id) AS detail_url,
        'CONSTRUCTION_SHARES' AS type
      FROM ${sch-gestepm}.construction_share cs
      LEFT JOIN ${sch-gestepm}.projects pr ON pr.id = cs.project_id
      LEFT JOIN ${sch-gestepm}.user us ON cs.user_id = us.user_id
      UNION
      SELECT
        ds.displacement_share_id AS share_id,
        ds.user_id,
        CONCAT(us.name, us.surnames) AS username,
        ds.project_id,
        pr.name AS project_name,
        ds.start_date,
        ds.end_date,
        CONCAT('/shares/displacement/', ds.displacement_share_id) AS detail_url,
        'DISPLACEMENT_SHARES' AS type
      FROM ${sch-gestepm}.displacement_share ds
      LEFT JOIN ${sch-gestepm}.projects pr ON pr.id = ds.project_id
      LEFT JOIN ${sch-gestepm}.user us ON ds.user_id = us.user_id
      UNION
      SELECT
        ins.inspection_id AS share_id,
        ins.first_technical AS user_id,
        CONCAT(us.name, us.surnames) AS username,
        nps.project_id,
        pr.name AS project_name,
        ins.start_date,
        ins.end_date,
        CONCAT('/shares/no-programmed/', ins.no_programmed_share_id, '/inspections/', ins.inspection_id) AS detail_url,
        'INSPECTIONS' AS type
      FROM ${sch-gestepm}.inspection ins
      LEFT JOIN ${sch-gestepm}.no_programmed_share nps ON ins.no_programmed_share_id = nps.no_programmed_share_id
      LEFT JOIN ${sch-gestepm}.projects pr ON pr.id = nps.project_id
      LEFT JOIN ${sch-gestepm}.user us ON ins.first_technical = us.user_id
      UNION
      SELECT
        ps.programmed_share_id AS share_id,
        ps.user_id,
        CONCAT(us.name, us.surnames) AS username,
        ps.project_id,
        pr.name AS project_name,
        ps.start_date,
        ps.end_date,
        CONCAT('/shares/programmed/', ps.programmed_share_id) AS detail_url,
        'PROGRAMMED_SHARES' AS type
      FROM ${sch-gestepm}.programmed_share ps
      LEFT JOIN ${sch-gestepm}.projects pr ON pr.id = ps.project_id
      LEFT JOIN ${sch-gestepm}.user us ON ps.user_id = us.user_id
      UNION
      SELECT
        ws.work_share_id AS share_id,
        ws.user_id,
        CONCAT(us.name, us.surnames) AS username,
        ws.project_id,
        pr.name AS project_name,
        ws.start_date,
        ws.end_date,
        CONCAT('/shares/work/', ws.work_share_id) AS detail_url,
        'WORK_SHARES' AS type
      FROM ${sch-gestepm}.work_share ws
      LEFT JOIN ${sch-gestepm}.projects pr ON pr.id = ws.project_id
      LEFT JOIN ${sch-gestepm}.user us ON ws.user_id = us.user_id
    ) AS sublist
    
    #whereToken #filter
    #orderByToken

  qry-page-of-s: |

    ${sql.qry-list-of-s}
    ${sql.paginated-query}

  qry-count-of-s: |

    SELECT COUNT(DISTINCT share_id) AS "count"
    FROM (${sql.qry-list-of-s}) final
    
  filter-s-by-params: |

    -- [AND
      -- ${sql.predicate-for-s-ids}
      -- ${sql.predicate-for-s-u-ids}
      -- ${sql.predicate-for-s-p-ids}
      -- ${sql.predicate-for-s-start-date}
      -- ${sql.predicate-for-s-end-date}
      -- ${sql.predicate-for-s-status}
    -- AND]

  predicate-for-s-ids: |

    share_id IN (:attr_s_ids)

  predicate-for-s-u-ids: |

    user_id IN (:attr_s_u_ids)

  predicate-for-s-p-ids: |

    project_id IN (:attr_s_p_ids)

  predicate-for-s-start-date: |

    start_date > :attr_s_start_date

  predicate-for-s-end-date: |

    end_date < :attr_s_end_date

  predicate-for-s-status: |
    
    :attr_s_status IS NOT NULL AND ((:attr_s_status = 'NOT_FINISHED' AND end_date IS NULL) OR (:attr_s_status = 'FINISHED' AND end_date IS NOT NULL))
