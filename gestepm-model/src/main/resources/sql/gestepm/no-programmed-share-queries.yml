sql:

  qry-list-of-nps: |
    
    SELECT
      nps.no_programmed_share_id,
      nps.user_id,
      CONCAT(us.name, us.surnames) AS username,
      nps.project_id,
      pr.name AS project_name,
      nps.start_date,
      nps.end_date,
      nps.description,
      nps.family_id,
      nps.sub_family_id,
      nps.topic_id,
      nps.forum_title,
      nps.state,
      nps.modified_at,
      nps.modified_by,
      GROUP_CONCAT(i.inspection_id) AS inspection_ids,
      GROUP_CONCAT(npsf.no_programmed_share_file_id) AS no_programmed_share_file_idS
    FROM ${sch-gestepm}.no_programmed_share nps
    LEFT JOIN ${sch-gestepm}.project pr ON pr.project_id = nps.project_id
    LEFT JOIN ${sch-gestepm}.user us ON us.user_id = nps.user_id
    LEFT JOIN ${sch-gestepm}.inspection i ON i.no_programmed_share_id = nps.no_programmed_share_id
    LEFT JOIN ${sch-gestepm}.no_programmed_share_file npsf ON npsf.no_programmed_share_id = nps.no_programmed_share_id

    #whereToken #filter
    GROUP BY nps.no_programmed_share_id
    #orderByToken

  qry-page-of-nps: |
    
    ${sql.qry-list-of-nps}
    ${sql.paginated-query}

  qry-count-of-nps: |

    SELECT COUNT(DISTINCT no_programmed_share_id) AS "count"
    FROM (
      SELECT nps.no_programmed_share_id
      FROM ${sch-gestepm}.no_programmed_share nps     
      #whereToken #filter
    ) final

  qry-create-nps: |
    
    INSERT INTO ${sch-gestepm}.no_programmed_share (
      user_id,
      project_id,
      start_date,
      state
    )
    VALUES (
      :attr_nps_u_id,
      :attr_nps_p_id,
      :attr_nps_start_date,
      1
    )

  qry-update-nps: |
    
    UPDATE
      ${sch-gestepm}.no_programmed_share
    SET
      start_date = :attr_nps_start_date,
      end_date = :attr_nps_end_date,
      description = :attr_nps_description,
      family_id = :attr_nps_f_id,
      sub_family_id = :attr_nps_sf_id,
      topic_id = :attr_nps_topic_id,
      forum_title = :attr_nps_forum_title,
      state = :attr_nps_state,
      modified_at = :attr_nps_modified_at,
      modified_by = :attr_nps_modified_by
    WHERE
      no_programmed_share_id = :attr_nps_id

  qry-delete-nps: |
    
    DELETE FROM ${sch-gestepm}.no_programmed_share WHERE no_programmed_share_id = :attr_nps_id

  filter-nps-by-params: |

    -- [AND
      -- ${sql.predicate-for-nps-ids}
      -- ${sql.predicate-for-nps-u-ids}
      -- ${sql.predicate-for-nps-p-ids}
      -- ${sql.predicate-for-nps-start-date}
      -- ${sql.predicate-for-nps-end-date}
      -- ${sql.predicate-for-nps-status}
    -- AND]

  filter-nps-by-id: |

    -- [AND
      -- ${sql.predicate-for-nps-id}
    -- AND]

  predicate-for-nps-id: |

    nps.no_programmed_share_id = :attr_nps_id

  predicate-for-nps-ids: |

    nps.no_programmed_share_id IN (:attr_nps_ids)

  predicate-for-nps-u-ids: |

    nps.user_id IN (:attr_nps_u_ids)

  predicate-for-nps-p-ids: |

    nps.project_id IN (:attr_nps_p_ids)

  predicate-for-nps-start-date: |

    nps.start_date > :attr_nps_start_date

  predicate-for-nps-end-date: |

    nps.end_date < :attr_nps_end_date

  predicate-for-nps-status: |

    :attr_nps_status IS NOT NULL AND ((:attr_nps_status = 'NOT_FINISHED' AND nps.end_date IS NULL) OR (:attr_nps_status = 'FINISHED' AND nps.end_date IS NOT NULL))
